--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
local ____exports = {}
--- Sorts array by certain property
-- 
-- @param array Array of similar objects containing properties with string keys
-- @param propertyName Key to sort objects
-- @param descending If true, sort in descending alphabet order. If false, sort in ascending order.
-- @returns
local function sortArrayByProperty(self, array, propertyName, descending)
    if descending == nil then
        descending = false
    end
    if array == nil then
        return array
    end
    local sortedArray = {table.unpack(array)}
    if sortedArray[1][propertyName] == nil then
        return sortedArray
    end
    if descending == false then
        sortedArray = __TS__ArraySort(
            sortedArray,
            function(____, elem1, elem2)
                return elem1[propertyName]:toLowerCase() < elem2[propertyName]:toLowerCase() and -1 or 1
            end
        )
    else
        sortedArray = __TS__ArraySort(
            sortedArray,
            function(____, elem1, elem2)
                return elem1[propertyName]:toLowerCase() < elem2[propertyName]:toLowerCase() and 1 or -1
            end
        )
    end
    return sortedArray
end
local SystemLocationType = SystemLocationType or ({})
SystemLocationType.null = 0
SystemLocationType[SystemLocationType.null] = "null"
SystemLocationType.CelestialCoordinate = 1
SystemLocationType[SystemLocationType.CelestialCoordinate] = "CelestialCoordinate"
SystemLocationType.CelestialOrbit = 2
SystemLocationType[SystemLocationType.CelestialOrbit] = "CelestialOrbit"
SystemLocationType.Space = 3
SystemLocationType[SystemLocationType.Space] = "Space"
SystemLocationType.FloatingDungeon = 4
SystemLocationType[SystemLocationType.FloatingDungeon] = "FloatingDungeon"
local function getSpaceLocationType(self, destination)
    if destination == nil then
        return SystemLocationType[0]
    end
    if type(destination[1]) == "string" then
        if destination[1] == "object" then
            return SystemLocationType[4]
        end
        if destination[1] == "orbit" then
            return SystemLocationType[2]
        end
        if destination[1] == "coordinate" then
            return SystemLocationType[1]
        end
        sb:logError("GetSpaceLocationType: can't identify type, first element is %s", {destination[0]})
        return SystemLocationType[0]
    end
    if __TS__TypeOf(destination[1]) == __TS__TypeOf(destination[2]) then
        return SystemLocationType[3]
    end
    sb:logError(
        "GetSpaceLocationType: can't identify location type: %s",
        {sb:printJson(destination)}
    )
    return SystemLocationType[0]
end
--- Returns stringified CelestialCoordinate back into object
-- 
-- @param target Can parse CelestialWorld or InstanceWorld
-- @returns CelestialCoordinate or null
local function WorldIdToObject(self, target)
    if string.sub(target, 1, 1) ~= "C" and string.sub(target, 1, 1) ~= "I" then
        return nil
    end
    if string.sub(target, 1, 1) == "C" then
        local tempTarget = __TS__StringSubstring(target, #"CelestialWorld:")
        local parsedTarget = __TS__StringSplit(tempTarget, ":")
        local targetCoordinate = {
            location = {
                __TS__ParseInt(parsedTarget[1]),
                __TS__ParseInt(parsedTarget[2]),
                __TS__ParseInt(parsedTarget[3])
            },
            planet = __TS__ParseInt(parsedTarget[4]),
            satellite = __TS__ParseInt(parsedTarget[5])
        }
        return targetCoordinate
    else
        local tempTarget = __TS__StringSubstring(target, #"InstanceWorld:")
        local parsedTarget = __TS__StringSplit(tempTarget, ":")
        local targetInstance = {
            instance = parsedTarget[1],
            uuid = parsedTarget[2] or "-",
            level = __TS__ParseFloat(parsedTarget[3]) or "-"
        }
        return targetInstance
    end
end
--- Flattens Coordinate/WorldId into string
-- 
-- @param target
-- @returns
local function ObjectToWorldId(self, target)
    if target.location ~= nil then
        local targetCoord = target
        return "CelestialWorld:" .. __TS__ArrayJoin(
            __TS__ObjectValues(targetCoord),
            ":"
        )
    else
        local targetInstance = target
        return "InstanceWorld:" .. __TS__ArrayJoin(
            __TS__ObjectValues(targetInstance),
            ":"
        )
    end
end
local function IsBookmarkInstance(self, target)
    return __TS__StringIncludes(target[1], "InstanceWorld")
end
local function JsonToDestination(self, destJson)
    local warpTarget
    if __TS__StringIncludes(destJson.warpAction, "InstanceWorld") == false then
        warpTarget = destJson.warpAction
    else
        local tempTarget = destJson.warpAction
        if __TS__StringIncludes(tempTarget, "=") == false then
            warpTarget = {tempTarget, nil}
        else
            warpTarget = __TS__StringSplit(tempTarget, "=")
        end
    end
    return {
        name = destJson.name,
        planetName = destJson.planetName,
        warpAction = warpTarget,
        icon = destJson.icon,
        deploy = destJson.deploy,
        mission = destJson.mission,
        prerequisiteQuest = destJson.prerequisiteQuest
    }
end
local function TargetToWarpCommand(self, target)
    if type(target) == "string" then
        return target
    end
    if target[1] == "player" then
        return "Player:" .. target[2]
    end
    if target[1] == "object" then
        return "Player:" .. target[2]
    else
        return (tostring(target[1]) .. "=") .. tostring(target[2])
    end
end
--- Filters bookmarks that have "filter" in bookmarkName or targetName
-- 
-- @param bookmarks
-- @param filter string
-- @returns undefined for empty filter, new array otherwise
local function FilterBookmarks(self, bookmarks, filter)
    if filter == "" then
        return nil
    end
    local filteredBookmarks = {}
    for ____, bkm in ipairs(bookmarks) do
        if __TS__StringIncludes(
            string.lower(bkm.bookmarkName),
            string.lower(filter)
        ) or __TS__StringIncludes(
            string.lower(bkm.targetName),
            string.lower(filter)
        ) then
            filteredBookmarks[#filteredBookmarks + 1] = bkm
        end
    end
    return filteredBookmarks
end
____exports.mel_tp_util = {
    sortArrayByProperty = sortArrayByProperty,
    getSpaceLocationType = getSpaceLocationType,
    WorldIdToObject = WorldIdToObject,
    ObjectToWorldId = ObjectToWorldId,
    JsonToDestination = JsonToDestination,
    TargetToWarpCommand = TargetToWarpCommand,
    FilterBookmarks = FilterBookmarks
}
return ____exports
