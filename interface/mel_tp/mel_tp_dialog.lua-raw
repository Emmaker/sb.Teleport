--[[ Generated with https://github.com/TypeScriptToLua/TypeScriptToLua ]]
local ____exports = {}
local displayPlanetInfo, OnTpTargetSelect, mel_tp
local ____mel_tp_dialog_2Eui_2Ejs = require("./mel_tp_dialog.ui.js")
local metagui = ____mel_tp_dialog_2Eui_2Ejs.metagui
local bookmarksList = ____mel_tp_dialog_2Eui_2Ejs.bookmarksList
local txtboxFilter = ____mel_tp_dialog_2Eui_2Ejs.txtboxFilter
local btnResetFilter = ____mel_tp_dialog_2Eui_2Ejs.btnResetFilter
local btnSortByPlanet = ____mel_tp_dialog_2Eui_2Ejs.btnSortByPlanet
local lblBkmName = ____mel_tp_dialog_2Eui_2Ejs.lblBkmName
local lblBkmHazards = ____mel_tp_dialog_2Eui_2Ejs.lblBkmHazards
local listHazards = ____mel_tp_dialog_2Eui_2Ejs.listHazards
local btnFallback = ____mel_tp_dialog_2Eui_2Ejs.btnFallback
local btnTeleport = ____mel_tp_dialog_2Eui_2Ejs.btnTeleport
local lblDump = ____mel_tp_dialog_2Eui_2Ejs.lblDump
local ____mel_tp_util = require("interface.mel_tp.mel_tp_util")
local mel_tp_util = ____mel_tp_util.mel_tp_util
function displayPlanetInfo(self, coord)
    local dbErrorText = mel_tp.dialogConfig.mel_tp_dialog.CelestialDatabaseError or ""
    local name = celestial:planetName(coord)
    local planetParams = celestial:visitableParameters(coord)
    if name ~= nil then
        lblBkmName:setText(name)
    else
        lblBkmName:setText(dbErrorText)
    end
    if planetParams ~= nil then
        lblBkmHazards:setText("Hazards: " .. sb:printJson(planetParams.environmentStatusEffects))
        if #planetParams.environmentStatusEffects > 0 then
            local hazardTemplate = listHazards.data
            for ____, effect in ipairs(planetParams.environmentStatusEffects) do
                if mel_tp.dialogConfig.planetaryEnvironmentHazards[effect] ~= nil then
                    hazardTemplate.file = mel_tp.dialogConfig.planetaryEnvironmentHazards[effect].icon
                    hazardTemplate.toolTip = mel_tp.dialogConfig.planetaryEnvironmentHazards[effect].displayName
                else
                    hazardTemplate.file = mel_tp.dialogConfig.planetaryEnvironmentHazards.error.icon
                    hazardTemplate.toolTip = mel_tp.dialogConfig.planetaryEnvironmentHazards.error.displayName
                end
                listHazards:addChild(hazardTemplate)
            end
        end
    else
        lblBkmHazards:setText(world:timeOfDay())
    end
end
function OnTpTargetSelect(self, bookmarkWidget)
    mel_tp.selected = bookmarkWidget.bkmData
    local dbErrorText = mel_tp.dialogConfig.mel_tp_dialog.CelestialDatabaseError or ""
    listHazards:clearChildren()
    if type(mel_tp.selected.warpAction) == "string" then
        if mel_tp.selected.warpAction ~= WarpAlias.OrbitedWorld then
            lblBkmName:setText("Special system alias signature " .. sb:printJson(mel_tp.selected.warpAction))
            lblBkmHazards:setText(world:timeOfDay())
        else
            local shipLocation = celestial:shipLocation()
            local locationType = mel_tp_util:getSpaceLocationType(shipLocation)
            if shipLocation == nil or locationType ~= "CelestialCoordinate" then
                if shipLocation == nil then
                    sb:logError("Teleport list contains [Orbited World] but ship location is NIL}")
                else
                    sb:logError("Teleport list contains [Orbited World] but ship location is " .. sb:printJson(shipLocation))
                end
                return
            end
            local coord = shipLocation[2]
            displayPlanetInfo(nil, coord)
        end
    elseif mel_tp.selected.warpAction[1] == "player" then
        lblBkmName:setText("Player signature")
        lblBkmHazards:setText(world:timeOfDay())
    elseif mel_tp.selected.warpAction[1] == "object" then
        lblBkmName:setText("Object Uuid signature")
        lblBkmHazards:setText(world:timeOfDay())
    else
        local warpTarget = mel_tp.selected.warpAction[1]
        local coord = mel_tp_util:WorldIdToObject(warpTarget)
        if coord == nil then
            lblBkmName:setText(dbErrorText)
            lblBkmHazards:setText(world:timeOfDay())
        else
            if coord.location ~= nil then
                displayPlanetInfo(nil, coord)
            else
                local instanceId = coord
                if instanceId.instance ~= nil then
                    lblBkmName:setText(instanceId.instance)
                end
                if instanceId.level ~= "-" then
                    lblBkmHazards:setText("Level " .. tostring(instanceId.level))
                end
            end
        end
    end
    lblDump:setText(sb:printJson(bookmarkWidget.bkmData))
end
mel_tp = {
    bookmarks = nil,
    filter = "",
    bookmarksFiltered = nil,
    bookmarkTemplate = bookmarksList.data,
    configPath = "",
    configOverride = nil,
    selected = nil,
    animation = "default",
    dialogConfig = root:assetJson("/interface/mel_tp/mel_tp.config")
}
mel_tp.bookmarks = player:teleportBookmarks()
mel_tp.bookmarkTemplate = bookmarksList.data
mel_tp.configPath = metagui.inputData.configPath
sb:logInfo(metagui.inputData.configPath)
mel_tp.configOverride = root:assetJson(mel_tp.configPath)
local function populateBookmarks(self)
    bookmarksList:clearChildren()
    local ____opt_0 = mel_tp.configOverride
    local ____temp_10 = ____opt_0 and ____opt_0.canBookmark or false
    local ____opt_2 = mel_tp.configOverride
    local ____temp_11 = ____opt_2 and ____opt_2.canTeleport or true
    local ____opt_4 = mel_tp.configOverride
    local ____temp_12 = ____opt_4 and ____opt_4.includePartyMembers or false
    local ____opt_6 = mel_tp.configOverride
    local ____temp_13 = ____opt_6 and ____opt_6.includePlayerBookmarks or false
    local ____opt_8 = mel_tp.configOverride
    local finalTpConfig = {
        canBookmark = ____temp_10,
        canTeleport = ____temp_11,
        includePartyMembers = ____temp_12,
        includePlayerBookmarks = ____temp_13,
        destinations = ____opt_8 and ____opt_8.destinations or nil
    }
    if finalTpConfig.destinations ~= nil then
        for ____, dest in ipairs(finalTpConfig.destinations) do
            local destination = mel_tp_util:JsonToDestination(dest)
            if destination.prerequisiteQuest ~= nil and player:hasCompletedQuest(destination.prerequisiteQuest) == false then
                return
            end
            if destination.warpAction == WarpAlias.OrbitedWorld then
                local shipLocation = celestial:shipLocation()
                local locationType = mel_tp_util:getSpaceLocationType(shipLocation)
                if locationType == nil or locationType ~= "CelestialCoordinate" then
                    return
                end
                if player:worldId() ~= player:ownShipWorldId() then
                    return
                end
            end
            if destination.warpAction == WarpAlias.OwnShip and player:worldId() == player:ownShipWorldId() then
                return
            end
            local currentBookmark = mel_tp.bookmarkTemplate
            local iconPath = ""
            if destination.icon ~= nil then
                iconPath = ("/interface/bookmarks/icons/" .. destination.icon) .. ".png"
            end
            if destination.mission == true and type(destination.warpAction) ~= "string" then
                local warpAction = destination.warpAction
                if __TS__StringIncludes(warpAction[1], "InstanceWorld") then
                    local teamUuid = ""
                    destination.warpAction = {warpAction[1], teamUuid}
                end
            end
            if finalTpConfig.includePartyMembers == true then
                local beamPartyMember = mel_tp.dialogConfig.mel_tp_dialog.beamPartyMemberLabel
                local deployPartyMember = mel_tp.dialogConfig.mel_tp_dialog.deployPartyMemberLabel
                local beamPartyMemberIcon = mel_tp.dialogConfig.mel_tp_dialog.beamPartyMemberIcon
                local deployPartyMemberIcon = mel_tp.dialogConfig.mel_tp_dialog.deployPartyMemberIcon
            end
            local bkmData = {
                warpAction = destination.warpAction,
                name = destination.name or "???",
                planetName = destination.planetName or "",
                icon = iconPath,
                deploy = destination.deploy or false,
                mission = destination.mission or false,
                prerequisiteQuest = destination.prerequisiteQuest or false
            }
            currentBookmark.children[1].file = bkmData.icon
            currentBookmark.children[2].text = bkmData.name
            currentBookmark.children[3].text = bkmData.planetName
            local addedBookmark = bookmarksList:addChild(currentBookmark)
            addedBookmark.onSelected = OnTpTargetSelect
            addedBookmark.bkmData = bkmData
        end
    end
    if finalTpConfig.includePlayerBookmarks then
        local filteredBookmarks
        if mel_tp.filter == "" then
            filteredBookmarks = mel_tp.bookmarks
        else
            filteredBookmarks = mel_tp.bookmarksFiltered
        end
        if filteredBookmarks ~= nil then
            for ____, bookmark in ipairs(filteredBookmarks) do
                local currentBookmark = mel_tp.bookmarkTemplate
                local iconPath = ""
                if bookmark.icon ~= nil then
                    iconPath = ("/interface/bookmarks/icons/" .. bookmark.icon) .. ".png"
                end
                local bkmData = {
                    warpAction = bookmark.target,
                    name = bookmark.bookmarkName or "???",
                    planetName = bookmark.targetName or "",
                    icon = iconPath,
                    deploy = false
                }
                currentBookmark.children[1].file = bkmData.icon
                currentBookmark.children[2].text = bkmData.name
                currentBookmark.children[3].text = bkmData.planetName
                local addedBookmark = bookmarksList:addChild(currentBookmark)
                addedBookmark.onSelected = OnTpTargetSelect
                addedBookmark.bkmData = bkmData
            end
        end
    end
    metagui:queueFrameRedraw()
end
txtboxFilter.onEnter = function(self)
    mel_tp.filter = txtboxFilter.text
    if mel_tp.bookmarks == nil then
        return
    end
    mel_tp.bookmarksFiltered = mel_tp_util:FilterBookmarks(mel_tp.bookmarks, mel_tp.filter)
    populateBookmarks(nil)
    player:say(sb:printJson(txtboxFilter.text))
end
txtboxFilter.onEscape = function(self)
    btnResetFilter:onClick()
end
btnResetFilter.onClick = function(self)
    mel_tp.filter = ""
    txtboxFilter:setText(mel_tp.filter)
    mel_tp.bookmarksFiltered = nil
    populateBookmarks(nil)
end
btnSortByPlanet.onClick = function(self)
    if mel_tp.bookmarks == nil then
        return
    end
    mel_tp.bookmarks = mel_tp_util:sortArrayByProperty(mel_tp.bookmarks, "targetName", false)
    populateBookmarks(nil)
end
btnTeleport.onClick = function(self)
    if mel_tp.selected == nil then
        widget:playSound("/sfx/interface/clickon_error.ogg")
        lblDump:setText("No target selected")
        return
    end
    local warpTarget = mel_tp_util:TargetToWarpCommand(mel_tp.selected.warpAction)
    lblDump:setText("Stringified warp target: " .. tostring(warpTarget))
    widget:playSound("/sfx/interface/ship_confirm1.ogg")
    player:warp(warpTarget, mel_tp.animation, mel_tp.selected.deploy or false)
    pane:dismiss()
end
btnFallback.onClick = function(self)
    activeItem:interact(
        "OpenTeleportDialog",
        mel_tp.configPath,
        pane:sourceEntity()
    )
    pane:dismiss()
end
if mel_tp.bookmarks ~= nil then
    mel_tp.bookmarks = mel_tp_util:sortArrayByProperty(mel_tp.bookmarks, "bookmarkName", false)
end
populateBookmarks(nil)
return ____exports
